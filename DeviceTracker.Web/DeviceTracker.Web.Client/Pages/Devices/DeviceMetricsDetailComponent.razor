@using DeviceTracker.Shared.Extensions
@using DeviceTracker.Shared.RequestDto
@using DeviceTracker.Web.Client.Components.Controls.Card
@using DeviceTracker.Web.Client.Contracts.Data.Api
@using DeviceTracker.Web.Client.Pages.Devices.DeviceDetailsComponents
@using static DeviceTracker.Web.Client.Pages.Devices.DeviceDetailsComponents.MapLocationComponent
@inject IDeviceDataService DeviceDataService
@if (SelectedDevice == null)
{
    <h1>Select a Device</h1>
}
else
{
    @if (_isLoading)
    {
        <MudSkeleton Height="100" Width="100" />
    }
    else
    {
        <div class="d-flex flex-column gap-1">
            <div class="d-flex align-content-center gap-2">
                <MudText Typo="Typo.h6">@SelectedDevice.DeviceName</MudText>
                <MudIconButton Icon="@Icons.Material.Rounded.Refresh" Size="Size.Small" OnClick="RefreshMetrics" />
                <MudButton EndIcon="@Icons.Material.Rounded.ArrowDropDown" OnClick="PublishFetchAllMetricsRequest">fetch</MudButton>
            </div>
            <div class="d-flex gap-3">
                <div class="d-flex flex-column gap-3">
                    <MetricCard Title="Voltage V1" Value="@_latestMetric!.Voltage!.V1.ToString()" BgColorHex="#f3e8ff" />
                    <MetricCard Title="Voltage V2" Value="@_latestMetric!.Voltage!.V2.ToString()" BgColorHex="#f3e8ff" />
                    <MetricCard Title="Voltage V3" Value="@_latestMetric!.Voltage!.V2.ToString()" BgColorHex="#f3e8ff" />
                </div>
                <div class="d-flex flex-column gap-3">
                    <MetricCard Title="Current I1" Value="@_latestMetric!.Current!.I1.ToString()" BgColorHex="#e0f7fa" />
                    <MetricCard Title="Current I2" Value="@_latestMetric!.Current!.I2.ToString()" BgColorHex="#e0f7fa" />
                    <MetricCard Title="Current I3" Value="@_latestMetric!.Current!.I3.ToString()" BgColorHex="#e0f7fa" />
                </div>
                <div class="d-flex flex-column gap-3">
                    <MetricCard Title="Power P1" Value="@_latestMetric!.Power!.P1.ToString()" BgColorHex="#f1f8e9" />
                    <MetricCard Title="Power P2" Value="@_latestMetric!.Power!.P2.ToString()" BgColorHex="#f1f8e9" />
                    <MetricCard Title="Power P3" Value="@_latestMetric!.Power!.P3.ToString()" BgColorHex="#f1f8e9" />
                </div>
                <div class="d-flex flex-column gap-3">
                    <div class="d-flex gap-3">
                        <MetricCard Title="Main Battery" Value="@_latestMetric!.Battery!.MainBattery.ToString()" BgColorHex="#fff8e1" />
                        <MetricCard Title="Backup Battery" Value="@_latestMetric!.Battery!.BackupBattery.ToString()" BgColorHex="#fff8e1" />
                        <MetricCard Title="SSR" Value="@_latestMetric!.Relay!.StartStopRelay.ToOnOffText()" BgColorHex="#e8f5e9" />
                        <MetricCard Title="FCR" Value="@_latestMetric!.Relay!.FuelCutRelay.ToOnOffText()" BgColorHex="#e8f5e9" />

                    </div>
                    <MapLocationComponent Loc="@_location" />
                </div>

            </div>
        </div>
    }
}

@code {
    [Parameter]
    public DeviceListItemDto? SelectedDevice { get; set; }
    private DeviceListItemDto? _lastSelectedDevice;

    private LatestMetricResponseDto? _latestMetric;
    private MapLocation_Location? _location;
    private bool _isLoading;
    protected override async Task OnParametersSetAsync()
    {
        if (_lastSelectedDevice != SelectedDevice)
        {
            _lastSelectedDevice = SelectedDevice;
            if (SelectedDevice == null) return;
            _isLoading = true;
            StateHasChanged();
            _latestMetric = await DeviceDataService.GetDeviceLatestMetricQuery(SelectedDevice.DeviceName);
            _location = new MapLocation_Location(_latestMetric!.Location!.Lat, _latestMetric.Location.Lng);
            _isLoading = false;
            StateHasChanged();
        }
    }

    async Task RefreshMetrics()
    {
        if (SelectedDevice == null) return;
        _latestMetric = await DeviceDataService.GetDeviceLatestMetricQuery(SelectedDevice.DeviceName);
        _location = new MapLocation_Location(_latestMetric!.Location!.Lat, _latestMetric.Location.Lng);
    }

    async Task PublishFetchAllMetricsRequest()
    {
        try
        {
            var result = await DeviceDataService.PublishAllMetricFetchRequest(SelectedDevice!.DeviceName, default);
            if (result.Data)
            {
                Task.Run(async () =>
                {
                    await Task.Delay(5000);
                    await RefreshMetrics();
                    await InvokeAsync(() => StateHasChanged());
                }).CatchAndLog();
            }
        }
        catch
        {
            
        }
    }
}
