@page "/devices"
@layout MainLayout
@inherits AppComponentBase
@using DeviceTracker.Web.Client.Components.Controls.Card
@using DeviceTracker.Web.Client.Components.Layout
@using DeviceTracker.Web.Client.Contracts.Data.Api
@using System.Collections.ObjectModel
@using DeviceTracker.Web.Client.Contracts.Presentation
@using DeviceTracker.Web.Client.Pages.Devices.NewDevice
@inject IDeviceDataService DeviceDataService
@inject IAppDialogService DialogService
@rendermode InteractiveServer

<AppPage>
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <div class="d-flex flex-column pt-4 gap-4">
            <h6>Device Dashboard</h6>
            <div class="d-flex justify-space-between flex-grow-1 gap-3 flex-wrap">

                <div class="flex-grow-1">
                    <DeviceMetricsDetailComponent SelectedDevice="@_selectedDevice" />
                </div>
                <SingleContentCard Class="flex-grow-1">
                    <h6>Available Devices</h6>
                    <MudDataGrid Outlined=false Elevation=0 T="DeviceListItemDto"
                                 Items="@_devices"
                                 SortMode="SortMode.Single"
                                 Loading="@_isLoading"
                                 Height="100%"
                                 Class="mt-5"
                                 Striped
                                 Dense
                                 Hover
                                 Bordered
                                 ShowColumnOptions
                                 RowClick="OnRowClicked"
                                 RowClass="cursor-pointer">
                        <ToolBarContent>
                            <div class="d-flex gap-2">
                                <MudTextField AdornmentIcon="@Icons.Material.Outlined.Search"
                                              Adornment="Adornment.End" Placeholder="Filter Results"
                                              DebounceInterval="100"
                                              Variant="Variant.Outlined"
                                              Clearable @bind-Value="_searchText" />
                                <MudButton Size="Size.Large">Search</MudButton>
                                <MudSpacer></MudSpacer>
                                <MudButton StartIcon="@Icons.Material.Rounded.PlusOne" OnClick="OpenRegisterDeviceDialogAsync">New</MudButton>
                            </div>

                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.DeviceIdentifier" Title="#" Sortable="false" />
                            <PropertyColumn Property="x => x.DeviceName" Title="Device" Sortable="false" Filterable="true" />
                            <PropertyColumn Property="x => x.GroupName" Title="Group" Sortable="true" Filterable="true" />
                            <PropertyColumn Property="@(x => x.CreatedOn.ToString("dd-MMM-yyyy HH:mm"))" Title="Created On" Sortable="true" />
                        </Columns>
                    </MudDataGrid>
                </SingleContentCard>
            </div>
        </div>
    </MudContainer>
</AppPage>


@code {
    private ObservableCollection<DeviceListItemDto>? _devices { get; set; }

    private DeviceListItemDto? _selectedDevice;
    private string? _searchText;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        var result = await DeviceDataService.GetAllDevicesAsync();
        if (result.IsFailed) return;
        _devices = new(result.Value
        .Select(x => new DeviceListItemDto
        {
            DeviceIdentifier = $"#{x.DeviceId}",
            DeviceName = x.DeviceName,
            GroupName = x.GroupName,
            CreatedOn = x.CreatedOn
        }));
        ChangeToLoadedState();
    }

    private void OnRowClicked(DataGridRowClickEventArgs<DeviceListItemDto> arg)
    {
        _selectedDevice = arg.Item;
    }

    private async Task OpenRegisterDeviceDialogAsync()
    {
        var dialogResult = await DialogService.RegisterDeviceDialog();
    }
}
